@model UserViewModel
@using Microsoft.AspNetCore.Identity
@inject SignInManager<User> signInManager
@{
    ViewData["Title"] = "Home Page";
    var golTot = 0;
    double totalExpenses = 0;
    double totalIncome = 0;
}
@if (!signInManager.IsSignedIn(User))
{
    <div class="col">
        <h2 class="text-center">Please Log In</h2>
    </div>
}
else{
<div class="container px-4">
    <h2 class="text-center">Welcome</h2>
    <div class="container overflow-hidden">
    <div class="row gx-5">
                <div class="col">
                    <div class="p-3 border bg-light text-center">Current Balance</div>
                <div class="p-3 border bg-light">@Model.User.CurrentBalance</div>
            </div>
            <div class="col">
                <div class="p-3 border bg-light text-center">Transactions</div>
                <div class="p-3 border bg-light">No Transactions</div>
            </div>
            @foreach (Transaction transaction in Model.Transactions)
            {
                if(transaction == Model.Transactions.Last()){
                <div class="col">
                    <div class="p-3 border bg-light text-center">Transactions</div>
                <div class="p-3 border bg-light">Last Transaction @transaction.Ammount</div>
                <div class="p-3 border bg-light">
                    <a class="btn btn-primary" asp-controller="Withdrawals"
                       asp-action="WithdrawalsPage">
                        Transactions
                    </a>
                </div>
            </div>
                }
            }
            <div class="col">
                <div class="p-3 border bg-light text-center">My Goals</div>
                <div class="p-3 border bg-light">No Goals</div>
            </div>
            @foreach (Goal gol in Model.Goals)
            {
                 golTot = golTot + 1;
            }
            <div class="col">
                <div class="p-3 border bg-light text-center">My Goals</div>
                <div class="p-3 border bg-light">
                    <div class="goalCard">
                        @foreach (var goal in Model.Goals)
                        {
                            <div class="card mb-3">
                                <div class="card-body">
                                        <h5 class="card-title">@goal.Name</h5>
                                </div>
                            </div>
                        }
                    </div>
                    <!--<a class="btn btn-primary" asp-controller="Home"></a>-->
                   Total Goals: @golTot <a class="btn btn-primary" asp-controller="Goal" asp-action="Goals"> Add Goals</a>
                </div>
            </div>
    </div>
    </div>
                <div class="container overflow-hidden" style="margin-top: 50px;">
                    <div class="row gx-5">
                <div class="col">
                    <div class="p-3 border bg-light text-center">Future bar graph</div>
                    <div>
                        <canvas id="myChart"></canvas>
                    </div>
                </div>
                    @foreach (Goal goal in Model.Goals)
                    {
                        if (goal == Model.Goals.Last())
                        {
                            <div class="col">
                                <div class="p-3 border bg-light text-center">Current Goal</div>
                                <div class="p-3 border bg-light">Goal PlaceHolder</div>
                            </div>
                        }
                    }

                </div>
                </div>
    <div class="container overflow-hidden" style="margin-top: 50px;">
        <div class="row gx-5">
            <div class="col">
                @foreach (RecurringPayment recur in Model.RecurringPayments)
                {
                    if (recur == Model.RecurringPayments.Last())
                    {
                        DateTime now = DateTime.Now;
                        int intervalsPassed = (int)((now - recur.StartingDate).TotalDays / recur.PaymenFrequencyDays);
                        DateTime nextPaymentDate = recur.StartingDate.AddDays((intervalsPassed + 1) * recur.PaymenFrequencyDays);
                        TimeSpan timeUntilNextPayment = nextPaymentDate - now;


                        <div class="p-3 border bg-light">Current Recurring Payments</div>
                        <div class="p-3 border bg-light">Amount: @recur.PaymentAmount</div>
                        <div class="p-3 bg-light">Frequency: @recur.PaymenFrequencyDays | Till next Payment @timeUntilNextPayment.Days</div>
                }
                }
            </div>
            <div class="col">
                <div class="p-3 border bg-light">Custom</div>
            </div>
            <div class="col">
                <div class="p-3 border bg-light text-center">Contact Us for Finacial Advice</div>
                <div class="p-3 border bg-light">
                    <a class="btn btn-primary" asp-controller="Home"
                         asp-action="Contact">
                        Contact
                    </a>
                </div>
            </div>
        </div>
    </div>

</div>
}
@if (!signInManager.IsSignedIn(User))
{
}
else{
<script>
    const ctx = document.getElementById('myChart');
    @foreach (Transaction transaction in Model.Transactions)
    {
        totalExpenses = totalExpenses + transaction.Ammount;
    }
    @foreach (Income income in Model.Income)
    {
        totalIncome = totalIncome + income.IncomeAmmount;
    }
    new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ['Expenses', 'Income'],
            datasets: [{
                label: 'Income/Expenses',
                data: [@totalExpenses, @totalIncome],
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
</script>
}